/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        vector<TreeNode*> allTrees;
        if (n == 0)
        {
            return allTrees;
        }
        
        return build(1, n);
    }

    vector<TreeNode*> build(int range_l, int range_r) {
        vector<TreeNode*> allTrees;
        if (range_l > range_r)
        {
            allTrees.push_back(nullptr);
            return allTrees;
        }

        for (size_t i = range_l; i <= range_r; i++)
        {
            // i 作为root的根节点
            vector<TreeNode*> leftTrees = build(range_l,i - 1);
            vector<TreeNode*> rightTrees = build(i+1, range_r);

            for (size_t x = 0; x < leftTrees.size(); x++)
            {
                for (size_t j = 0; j < rightTrees.size(); j++)
                {
                    TreeNode* root = new TreeNode(i);
                    root->left = leftTrees[x];
                    root->right = rightTrees[j];
                    allTrees.push_back(root);
                }   
            }
        }
        return allTrees;
    }
};
