class Solution {
public:
 
    // 俄罗斯套娃信封问题
    int maxEnvelopes(vector<vector<int>>& envelopes) {
        if (envelopes.empty()) {
            return 0;
        }
        
        int len = envelopes.size();

        for (size_t i = 0; i < len; i++)
        {
            bool flag = false;
            for (size_t j = 0; j < len-i-1; j++)
            {
                if (envelopes[j][0] > envelopes[j+1][0])  // 交换
                {
                    swap(envelopes, j, j+1);
                    flag = true;
                }

                int temp_point = j;
                    
                while (envelopes[temp_point][0] == envelopes[temp_point+1][0] && envelopes[temp_point][1] < envelopes[temp_point+1][1]) // 降序需要降到最开始
                {
                    // 交换
                    swap(envelopes, temp_point, temp_point+1);
                    temp_point--;
                    if (temp_point < 0) {
                        break;
                    }
                    flag = true;
                } 
            }
            if (!flag)  { break; }
            
        }

        // 寻找增长子序列
        // vector<int> mem;
        // for (size_t i = 0; i < len; i++)
        // {
        //     mem.push_back(envelopes[i][1]);
        // }
        
        return lengthOfLIS2(envelopes);
        
    }


    int lengthOfLIS2(vector<vector<int>>& nums) {
        vector<int> dp;
        dp.assign(nums.size(), 1);

        for (size_t i = 0; i < nums.size(); i++)
        {
            for (size_t j = 0; j < i; j++)
            {
                if (nums[i][1] > nums[j][1] && nums[i][0] > nums[j][0])
                {
                    dp[i] = max(dp[i], dp[j] + 1); // 这个 j 很有技巧的保证了递增特性
                }
            }
        }

        int result = 0;
        for (size_t i = 0; i < dp.size(); i++)
        {
            result = max(result, dp[i]);
        }
        return result;

    }
    void swap(vector<vector<int>>& envelopes, int i, int j) {
        vector<int> temp_arr;
        temp_arr.push_back(envelopes[i][0]);
        temp_arr.push_back(envelopes[i][1]);
                    
        envelopes[i][0] = envelopes[j][0];
        envelopes[i][1] = envelopes[j][1];

        envelopes[j][0] = temp_arr[0];
        envelopes[j][1] = temp_arr[1];
    }

};

