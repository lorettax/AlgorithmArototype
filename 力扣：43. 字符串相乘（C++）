
class Solution {
public:
    string multiply(string num1, string num2) {
        if (num1 == "0" || num2 == "0")
        {
            return "0";
        }
        
        string result = "";

        int str_len1  = num1.size();
        int str_len2 = num2.size();
        
        for (int i = str_len1-1; i >=0 ; i--)
        {

            int temp_add = 0;
            string temp_arr;

            // 尾巴补零
            for (int j = str_len1 -1; j > i ; j--)
            {
                temp_arr.push_back(0);
            }
            
            int x = num1.at(i) - '0';
            for (int j = str_len2 -1; j >=0 ; j--)
            {
                // 两个字符串相减就是 之间的相差
                int y = num2.at(j) - '0';
                int temp_res =( x * y ) + temp_add;

                temp_arr.push_back(temp_res % 10);
                // 计算被取模几次，然后用做下一次的累加
                temp_add = temp_res / 10;

            }

            while (temp_add != 0)
            {
                temp_arr.push_back(temp_add%10);
                temp_add /= 10;
            }
            
            reverse(temp_arr.begin(), temp_arr.end());

            for (auto &c : temp_arr)
            {
                c += '0';
            }
            
            result = addString(result, temp_arr);
        }
        return result;

    }

    string addString(string &str1, string &str2) {
        int i = str1.size()-1;
        int j = str2.size()-1;
        int add = 0;
        string ans;

        while (i >= 0 || j >= 0 || add != 0)
        {
            int x = i >= 0 ? str1.at(i) - '0' : 0;
            int y = j >= 0 ? str2.at(j) - '0' : 0;

            int result = x + y + add;
            ans.push_back(result % 10);
            add = result / 10;
            i--;
            j--;
        }

        reverse(ans.begin(), ans.end());
        for (auto &c : ans)
        {
            c += '0';
        }
        return ans;
        
    }

};
